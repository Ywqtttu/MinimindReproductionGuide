{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP+9nyWwZxIog+UxBXakmjX"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"QrLOSimOnm9t"},"outputs":[],"source":["import json\n","import random\n","import re\n","\n","import pandas as pd\n","import numpy as np\n","from torch.utils.data import Dataset, DataLoader\n","import torch\n","from sklearn.model_selection import train_test_split\n","import os\n","import ast\n","\n","os.environ[\"TOKENIZERS_PARALLELISM\"] = \"false\"\n","\n","\n","class PretrainDataset(Dataset):\n","    def __init__(self, data_path, tokenizer, max_length=512):\n","        super().__init__()\n","        self.tokenizer = tokenizer\n","        self.max_length = max_length\n","        self.samples = self.load_data(data_path)\n","\n","    def load_data(self, path):\n","        samples = []\n","        with open(path, 'r', encoding='utf-8') as f:\n","            for line_num, line in enumerate(f, 1):\n","                data = json.loads(line.strip())\n","                samples.append(data)\n","        return samples\n","\n","    def __len__(self):\n","        return len(self.samples)\n","\n","    def __getitem__(self, index):\n","        sample = self.samples[index]\n","\n","        # 构建输入文本***\n","        encoding = self.tokenizer(\n","            str(sample['text']),\n","            max_length=self.max_length,\n","            padding='max_length',\n","            truncation=True,\n","            return_tensors='pt'\n","        )\n","        input_ids = encoding.input_ids.squeeze()\n","        loss_mask = (input_ids != self.tokenizer.pad_token_id)\n","\n","        X = torch.tensor(input_ids[:-1], dtype=torch.long)\n","        Y = torch.tensor(input_ids[1:], dtype=torch.long)\n","        loss_mask = torch.tensor(loss_mask[1:], dtype=torch.long)\n","        return X, Y, loss_mask\n","\n","\n","class SFTDataset(Dataset):\n","    def __init__(self, jsonl_path, tokenizer, max_length=1024):\n","        super().__init__()\n","        self.tokenizer = tokenizer\n","        self.max_length = max_length\n","        self.samples = self.load_data(jsonl_path)\n","        self.bos_id = tokenizer('<|im_start|>assistant', add_special_tokens=False).input_ids\n","        self.eos_id = tokenizer('<|im_end|>', add_special_tokens=False).input_ids\n","\n","    def __len__(self):\n","        return len(self.samples)\n","\n","    def load_data(self, path):\n","        samples = []\n","        with open(path, 'r', encoding='utf-8') as f:\n","            for line_num, line in enumerate(f, 1):\n","                data = json.loads(line.strip())\n","                samples.append(data)\n","        return samples\n","\n","    def _create_chat_prompt(self, conversations):\n","        \"\"\"构建符合ChatML格式的对话\"\"\"\n","        messages = []\n","        for i, turn in enumerate(conversations):\n","            role = 'user' if i % 2 == 0 else 'assistant'\n","            messages.append({\"role\": role, \"content\": turn['content']})\n","        return self.tokenizer.apply_chat_template(\n","            messages,\n","            tokenize=False,\n","            add_generation_prompt=False\n","        )\n","\n","    def _generate_loss_mask(self, input_ids):\n","        loss_mask = [0] * len(input_ids)\n","        i = 0\n","        while i < len(input_ids):\n","            if input_ids[i:i + len(self.bos_id)] == self.bos_id:\n","                start = i + len(self.bos_id)\n","                end = start\n","                while end < len(input_ids):\n","                    if input_ids[end:end + len(self.eos_id)] == self.eos_id:\n","                        break\n","                    end += 1\n","                for j in range(start + 1, min(end + len(self.eos_id) + 1, self.max_length)):\n","                    loss_mask[j] = 1\n","                i = end + len(self.eos_id) if end < len(input_ids) else len(input_ids)\n","            else:\n","                i += 1\n","        return loss_mask\n","\n","    def __getitem__(self, index):\n","        sample = self.samples[index]\n","        # 构建对话提示\n","        prompt = self._create_chat_prompt(sample['conversations'])\n","        input_ids = self.tokenizer(prompt).input_ids[:self.max_length]\n","        input_ids += [self.tokenizer.pad_token_id] * (self.max_length - len(input_ids))\n","\n","        # 生成动态损失掩码\n","        loss_mask = self._generate_loss_mask(input_ids)\n","\n","        # 构建训练数据\n","        X = torch.tensor(input_ids[:-1], dtype=torch.long)\n","        Y = torch.tensor(input_ids[1:], dtype=torch.long)\n","        loss_mask = torch.tensor(loss_mask[1:], dtype=torch.long)  # 对齐预测位置\n","\n","        return X, Y, loss_mask\n","\n","\n","class DPODataset(Dataset):\n","    def __init__(self, file_path, tokenizer, max_length=4096):\n","        super().__init__()\n","        self.tokenizer = tokenizer\n","        self.max_length = max_length\n","        self.padding = tokenizer.pad_token_id if tokenizer.pad_token_id is not None else 0\n","        self.bos_id = tokenizer('<|im_start|>assistant', add_special_tokens=False).input_ids\n","        self.eos_id = tokenizer('<|im_end|>', add_special_tokens=False).input_ids\n","        with open(file_path, 'r', encoding='utf-8') as f:\n","            self.data = []\n","            for line in f:\n","                line = line.strip()\n","                obj = json.loads(line)\n","                self.data.append(obj)\n","\n","    def __len__(self):\n","        return len(self.data)\n","\n","    def __getitem__(self, index):\n","        item = self.data[index]\n","        chosen = item['chosen']  # 是一个 list，里面包含若干 {role, content}\n","        rejected = item['rejected']  # 同上\n","        chosen_prompt = self.tokenizer.apply_chat_template(\n","            chosen, tokenize=False, add_generation_prompt=False\n","        )\n","\n","        rejected_prompt = self.tokenizer.apply_chat_template(\n","            rejected, tokenize=False, add_generation_prompt=False\n","        )\n","        chosen_encoding = self.tokenizer(\n","            chosen_prompt, truncation=True, max_length=self.max_length, padding='max_length'\n","        )\n","        rejected_encoding = self.tokenizer(\n","            rejected_prompt, truncation=True, max_length=self.max_length, padding='max_length'\n","        )\n","\n","        chosen_input_ids = chosen_encoding['input_ids']\n","        chosen_loss_mask = self._generate_loss_mask(chosen_input_ids)\n","\n","        rejected_input_ids = rejected_encoding['input_ids']\n","        rejected_loss_mask = self._generate_loss_mask(rejected_input_ids)\n","        x_chosen = torch.tensor(chosen_input_ids[:-1], dtype=torch.long)\n","        y_chosen = torch.tensor(chosen_input_ids[1:], dtype=torch.long)\n","        mask_chosen = torch.tensor(chosen_loss_mask[1:], dtype=torch.long)\n","        x_rejected = torch.tensor(rejected_input_ids[:-1], dtype=torch.long)\n","        y_rejected = torch.tensor(rejected_input_ids[1:], dtype=torch.long)\n","        mask_rejected = torch.tensor(rejected_loss_mask[1:], dtype=torch.long)\n","\n","        return {\n","            'x_chosen': x_chosen,\n","            'y_chosen': y_chosen,\n","            'mask_chosen': mask_chosen,\n","            'x_rejected': x_rejected,\n","            'y_rejected': y_rejected,\n","            'mask_rejected': mask_rejected\n","        }\n","\n","    def _generate_loss_mask(self, input_ids):\n","        loss_mask = [0] * len(input_ids)\n","        i = 0\n","        while i < len(input_ids):\n","            if input_ids[i:i + len(self.bos_id)] == self.bos_id:\n","                start = i + len(self.bos_id)\n","                end = start\n","                while end < len(input_ids):\n","                    if input_ids[end:end + len(self.eos_id)] == self.eos_id:\n","                        break\n","                    end += 1\n","                for j in range(start + 1, min(end + len(self.eos_id) + 1, self.max_length)):\n","                    loss_mask[j] = 1\n","                i = end + len(self.eos_id) if end < len(input_ids) else len(input_ids)\n","            else:\n","                i += 1\n","        return loss_mask\n","\n","\n","class RLAIFDataset(Dataset):\n","    def __init__(self, jsonl_path, tokenizer, max_length=1024):\n","        super().__init__()\n","        self.tokenizer = tokenizer\n","        self.max_length = max_length\n","        self.samples = self.load_data(jsonl_path)\n","        self.bos_id = tokenizer('<|im_start|>assistant', add_special_tokens=False).input_ids\n","        self.eos_id = tokenizer('<|im_end|>', add_special_tokens=False).input_ids\n","\n","    def __len__(self):\n","        return len(self.samples)\n","\n","    def load_data(self, path):\n","        samples = []\n","        with open(path, 'r', encoding='utf-8') as f:\n","            for line_num, line in enumerate(f, 1):\n","                data = json.loads(line.strip())\n","                samples.append(data)\n","        return samples\n","\n","    def _create_chat_prompt(self, conversations):\n","        \"\"\"构建符合ChatML格式的对话\"\"\"\n","        messages = []\n","        answer = ''\n","        for i, turn in enumerate(conversations):\n","            role = 'user' if i % 2 == 0 else 'assistant'\n","            messages.append({\"role\": role, \"content\": turn['content']})\n","            answer = turn['content']\n","        return self.tokenizer.apply_chat_template(\n","            messages[:-1],\n","            tokenize=False,\n","            add_generation_prompt=True\n","        ), answer\n","\n","    def __getitem__(self, index):\n","        sample = self.samples[index]\n","        # 构建对话提示\n","        prompt, answer = self._create_chat_prompt(sample['conversations'])\n","\n","        return {\n","            'prompt': prompt,\n","            'answer': answer\n","        }\n","\n","\n","if __name__ == \"__main__\":\n","    pass"]}]}